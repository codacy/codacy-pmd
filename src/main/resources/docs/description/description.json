[ {
  "patternId" : "category_xsl_performance_AvoidAxisNavigation",
  "title" : "Avoid Axis Navigation",
  "description" : "Axis navigation has the largest impact when writing an XPath query.",
  "parameters" : [ {
    "name" : "checkSelfDescendantAbreviation",
    "description" : "descendant::self abreviation, '//', will also trigger this rule."
  } ]
}, {
  "patternId" : "category_xsl_codestyle_UseConcatOnce",
  "title" : "Use Concat Once",
  "description" : "The xpath concat() function accepts as many arguments as required, you may be able to factorize this expression",
  "parameters" : [ ]
}, {
  "patternId" : "category_xml_errorprone_MistypedCDATASection",
  "title" : "Mistyped CDATA Section",
  "description" : "Potentially mistyped CDATA section with extra [ at beginning or ] at the end.",
  "parameters" : [ ]
}, {
  "patternId" : "category_xml_bestpractices_MissingEncoding",
  "title" : "Missing Encoding",
  "description" : "Set an explicit XML encoding in the XML declaration to ensure proper parsing",
  "parameters" : [ ]
}, {
  "patternId" : "category_visualforce_security_VfUnescapeEl",
  "title" : "VF Unescape EL",
  "description" : "Avoid unescaped user controlled content in EL",
  "parameters" : [ ]
}, {
  "patternId" : "category_visualforce_security_VfHtmlStyleTagXss",
  "title" : "VF HTML Style Tag Xss",
  "description" : "Use correct encoding for expressions within Style tag",
  "parameters" : [ ]
}, {
  "patternId" : "category_visualforce_security_VfCsrf",
  "title" : "VF CSRF",
  "description" : "Avoid calling VF action upon page load",
  "parameters" : [ ]
}, {
  "patternId" : "category_velocity_errorprone_EmptyIfStmt",
  "title" : "Empty If Stmt",
  "description" : "Avoid empty if statements",
  "parameters" : [ ]
}, {
  "patternId" : "category_velocity_errorprone_EmptyForeachStmt",
  "title" : "Empty Foreach Stmt",
  "description" : "Avoid empty foreach loops",
  "parameters" : [ ]
}, {
  "patternId" : "category_velocity_design_NoInlineStyles",
  "title" : "No Inline Styles",
  "description" : "Avoid inline styles",
  "parameters" : [ ]
}, {
  "patternId" : "category_velocity_design_NoInlineJavaScript",
  "title" : "No Inline JavaScript",
  "description" : "Avoid inline JavaScript",
  "parameters" : [ ]
}, {
  "patternId" : "category_velocity_design_ExcessiveTemplateLength",
  "title" : "Excessive Template Length",
  "description" : "Template is too long",
  "parameters" : [ ]
}, {
  "patternId" : "category_velocity_design_CollapsibleIfStatements",
  "title" : "Collapsible If Statements",
  "description" : "These nested if statements could be combined",
  "parameters" : [ ]
}, {
  "patternId" : "category_velocity_design_AvoidDeeplyNestedIfStmts",
  "title" : "Avoid Deeply Nested If Stmts",
  "description" : "Deeply nested if..then statements are hard to read",
  "parameters" : [ ]
}, {
  "patternId" : "category_velocity_bestpractices_UnusedMacroParameter",
  "title" : "Unused Macro Parameter",
  "description" : "Avoid unused macro parameters.",
  "parameters" : [ ]
}, {
  "patternId" : "category_velocity_bestpractices_AvoidReassigningParameters",
  "title" : "Avoid Reassigning Parameters",
  "description" : "Avoid reassigning macro parameters.",
  "parameters" : [ ]
}, {
  "patternId" : "category_swift_errorprone_ForceTry",
  "title" : "Force Try",
  "description" : "Force tries should be avoided.",
  "parameters" : [ ]
}, {
  "patternId" : "category_swift_errorprone_ForceCast",
  "title" : "Force Cast",
  "description" : "Force casts should be avoided.",
  "parameters" : [ ]
}, {
  "patternId" : "category_swift_bestpractices_UnavailableFunction",
  "title" : "Unavailable Function",
  "description" : "Unimplemented functions should be marked as unavailable.",
  "parameters" : [ ]
}, {
  "patternId" : "category_swift_bestpractices_ProhibitedInterfaceBuilder",
  "title" : "Prohibited Interface Builder",
  "description" : "Creating views using Interface Builder should be avoided.",
  "parameters" : [ ]
}, {
  "patternId" : "category_pom_errorprone_ProjectVersionAsDependencyVersion",
  "title" : "Project Version As Dependency Version",
  "description" : "Do not use project.version to express a dependency version.",
  "parameters" : [ ]
}, {
  "patternId" : "category_pom_errorprone_InvalidDependencyTypes",
  "title" : "Invalid Dependency Types",
  "description" : "By default, Maven only recognizes the following types: pom, jar, maven-plugin, ejb, war, ear, rar, par.",
  "parameters" : [ {
    "name" : "validTypes",
    "description" : "Set of valid types."
  } ]
}, {
  "patternId" : "category_plsql_errorprone_TO_TIMESTAMPWithoutDateFormat",
  "title" : "TO_TIMESTAMP Without Date Format",
  "description" : "TO_TIMESTAMP without date format",
  "parameters" : [ ]
}, {
  "patternId" : "category_plsql_errorprone_TO_DATE_TO_CHAR",
  "title" : "TO_DATE_TO_CHAR",
  "description" : "TO_DATE(TO_CHAR(variable)) instead of TRUNC(variable)",
  "parameters" : [ ]
}, {
  "patternId" : "category_plsql_errorprone_TO_DATEWithoutDateFormat",
  "title" : "TO_DATE Without Date Format",
  "description" : "TO_DATE without date format",
  "parameters" : [ ]
}, {
  "patternId" : "category_plsql_design_TooManyMethods",
  "title" : "Too Many Methods",
  "description" : "This object has too many methods, consider refactoring it.",
  "parameters" : [ {
    "name" : "maxmethods",
    "description" : "The method count reporting threshold"
  } ]
}, {
  "patternId" : "category_plsql_design_TooManyFields",
  "title" : "Too Many Fields",
  "description" : "Too many fields",
  "parameters" : [ ]
}, {
  "patternId" : "category_plsql_design_NcssObjectCount",
  "title" : "NCSS Object Count",
  "description" : "The Oracle object {0} has a NCSS line count of {1}",
  "parameters" : [ ]
}, {
  "patternId" : "category_plsql_design_NcssMethodCount",
  "title" : "NCSS Method Count",
  "description" : "The method {0}() has an NCSS line count of {1}",
  "parameters" : [ ]
}, {
  "patternId" : "category_plsql_design_NPathComplexity",
  "title" : "NPath Complexity",
  "description" : "The method {0}() has an NPath complexity of {1}",
  "parameters" : [ ]
}, {
  "patternId" : "category_plsql_design_ExcessiveTypeLength",
  "title" : "Excessive Type Length",
  "description" : "Avoid really long Object Type specifications.",
  "parameters" : [ ]
}, {
  "patternId" : "category_plsql_design_ExcessiveParameterList",
  "title" : "Excessive Parameter List",
  "description" : "Avoid long parameter lists.",
  "parameters" : [ ]
}, {
  "patternId" : "category_plsql_design_ExcessivePackageSpecificationLength",
  "title" : "Excessive Package Specification Length",
  "description" : "Avoid really long Package Specifications.",
  "parameters" : [ ]
}, {
  "patternId" : "category_plsql_design_ExcessivePackageBodyLength",
  "title" : "Excessive Package Body Length",
  "description" : "Avoid really long Object Type and Package bodies.",
  "parameters" : [ ]
}, {
  "patternId" : "category_plsql_design_ExcessiveObjectLength",
  "title" : "Excessive Object Length",
  "description" : "Avoid really long Oracle object specifications and bodies.",
  "parameters" : [ ]
}, {
  "patternId" : "category_plsql_design_ExcessiveMethodLength",
  "title" : "Excessive Method Length",
  "description" : "Avoid really long methods.",
  "parameters" : [ ]
}, {
  "patternId" : "category_plsql_design_CyclomaticComplexity",
  "title" : "Cyclomatic Complexity",
  "description" : "The {0} ''{1}'' has a Cyclomatic Complexity of {2}.",
  "parameters" : [ ]
}, {
  "patternId" : "category_plsql_codestyle_MisplacedPragma",
  "title" : "Misplaced Pragma",
  "description" : "Pragma should be used only inside the declaration block before 'BEGIN'.",
  "parameters" : [ ]
}, {
  "patternId" : "category_plsql_codestyle_LineLength",
  "title" : "Line Length",
  "description" : "The line is too long.",
  "parameters" : [ ]
}, {
  "patternId" : "category_plsql_codestyle_ForLoopNaming",
  "title" : "For Loop Naming",
  "description" : "Use meaningful names for loop variables",
  "parameters" : [ {
    "name" : "allowSimpleLoops",
    "description" : "Ignore simple loops, that are not nested"
  }, {
    "name" : "cursorPattern",
    "description" : "The pattern used for the cursor loop variable"
  }, {
    "name" : "indexPattern",
    "description" : "The pattern used for the index loop variable"
  } ]
}, {
  "patternId" : "category_plsql_codestyle_CodeFormat",
  "title" : "Code Format",
  "description" : "Please check the formatting/indentation",
  "parameters" : [ ]
}, {
  "patternId" : "category_plsql_codestyle_AvoidTabCharacter",
  "title" : "Avoid Tab Character",
  "description" : "Avoid tab characters for indentation. Use spaces instead.",
  "parameters" : [ ]
}, {
  "patternId" : "category_plsql_bestpractices_TomKytesDespair",
  "title" : "Tom Kytes Despair",
  "description" : "WHEN OTHERS THEN NULL - when you do this, Tom Kyte cries",
  "parameters" : [ ]
}, {
  "patternId" : "category_kotlin_errorprone_OverrideBothEqualsAndHashcode",
  "title" : "Override Both Equals And Hashcode",
  "description" : "Ensure you override both equals() and hashCode()",
  "parameters" : [ ]
}, {
  "patternId" : "category_kotlin_bestpractices_FunctionNameTooShort",
  "title" : "Function Name Too Short",
  "description" : "Function names should have non-cryptic and clear names.",
  "parameters" : [ ]
}, {
  "patternId" : "category_jsp_security_NoUnsanitizedJSPExpression",
  "title" : "No Unsanitized JSP Expression",
  "description" : "Using unsanitized JSP expression can lead to Cross Site Scripting (XSS) attacks",
  "parameters" : [ ]
}, {
  "patternId" : "category_jsp_security_IframeMissingSrcAttribute",
  "title" : "Iframe Missing Src Attribute",
  "description" : "IFrames must have a src attribute.",
  "parameters" : [ ]
}, {
  "patternId" : "category_jsp_errorprone_JspEncoding",
  "title" : "JSP Encoding",
  "description" : "JSP file should use UTF-8 encoding",
  "parameters" : [ ]
}, {
  "patternId" : "category_jsp_design_NoScriptlets",
  "title" : "No Scriptlets",
  "description" : "Avoid having scriptlets inside a JSP file.",
  "parameters" : [ ]
}, {
  "patternId" : "category_jsp_design_NoLongScripts",
  "title" : "No Long Scripts",
  "description" : "Avoid having long scripts (e.g. Javascript) inside a JSP file.",
  "parameters" : [ ]
}, {
  "patternId" : "category_jsp_design_NoInlineStyleInformation",
  "title" : "No Inline Style Information",
  "description" : "Avoid having style information in JSP files.",
  "parameters" : [ ]
}, {
  "patternId" : "category_jsp_design_NoInlineScript",
  "title" : "No Inline Script",
  "description" : "Avoiding inlining HTML script content",
  "parameters" : [ ]
}, {
  "patternId" : "category_jsp_codestyle_DuplicateJspImports",
  "title" : "Duplicate JSP Imports",
  "description" : "Avoid duplicate imports.",
  "parameters" : [ ]
}, {
  "patternId" : "category_jsp_bestpractices_NoJspForward",
  "title" : "No JSP Forward",
  "description" : "Do not do a forward from within a JSP file.",
  "parameters" : [ ]
}, {
  "patternId" : "category_jsp_bestpractices_NoHtmlComments",
  "title" : "No HTML Comments",
  "description" : "Use JSP comments instead of HTML comments",
  "parameters" : [ ]
}, {
  "patternId" : "category_jsp_bestpractices_NoClassAttribute",
  "title" : "No Class Attribute",
  "description" : "Do not use an attribute called 'class'.",
  "parameters" : [ ]
}, {
  "patternId" : "category_jsp_bestpractices_DontNestJsfInJstlIteration",
  "title" : "Dont Nest JSF In Jstl Iteration",
  "description" : "Do not nest JSF component custom actions inside a custom action that iterates over its body.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_security_InsecureCryptoIv",
  "title" : "Insecure Crypto Iv",
  "description" : "Do not use hard coded initialization vector in crypto operations",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_security_HardCodedCryptoKey",
  "title" : "Hard Coded Crypto Key",
  "description" : "Do not use hard coded encryption keys",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_performance_UselessStringValueOf",
  "title" : "Useless StringValueOf",
  "description" : "No need to call String.valueOf to append to a string.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_performance_UseStringBufferLength",
  "title" : "Use String Buffer Length",
  "description" : "This is an inefficient use of CharSequence.toString; call CharSequence.length instead.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_performance_UseStringBufferForStringAppends",
  "title" : "Use String Buffer For String Appends",
  "description" : "Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_performance_UseIndexOfChar",
  "title" : "Use Index Of Char",
  "description" : "String.indexOf(char) is faster than String.indexOf(String).",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_performance_UseIOStreamsWithApacheCommonsFileItem",
  "title" : "Use IO Streams With Apache Commons File Item",
  "description" : "Avoid memory intensive FileItem.get() or FileItem.getString()",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_performance_UseArraysAsList",
  "title" : "Use Arrays As List",
  "description" : "Use asList instead of tight loops",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_performance_UseArrayListInsteadOfVector",
  "title" : "Use ArrayList Instead Of Vector",
  "description" : "Use ArrayList instead of Vector",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_performance_TooFewBranchesForASwitchStatement",
  "title" : "Too Few Branches For A Switch Statement",
  "description" : "A switch with less than three branches is inefficient, use a 'if statement' instead.",
  "parameters" : [ {
    "name" : "minimumNumberCaseForASwitch",
    "description" : "Minimum number of branches for a switch"
  } ]
}, {
  "patternId" : "category_java_performance_StringToString",
  "title" : "String To String",
  "description" : "Avoid calling toString() on String objects; this is unnecessary.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_performance_StringInstantiation",
  "title" : "String Instantiation",
  "description" : "Avoid instantiating String objects; this is usually unnecessary.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_performance_RedundantFieldInitializer",
  "title" : "Redundant Field Initializer",
  "description" : "Avoid using redundant field initializer for ''${variableName}''",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_performance_OptimizableToArrayCall",
  "title" : "Optimizable To Array Call",
  "description" : "This call to Collection.toArray() may be optimizable",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_performance_InsufficientStringBufferDeclaration",
  "title" : "Insufficient String Buffer Declaration",
  "description" : "{0} has been initialized with size {1}, but has at least {2} characters appended.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_performance_InefficientStringBuffering",
  "title" : "Inefficient String Buffering",
  "description" : "Avoid concatenating nonliterals in a StringBuffer/StringBuilder constructor or append().",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_performance_InefficientEmptyStringCheck",
  "title" : "Inefficient Empty String Check",
  "description" : "String.trim().length() == 0 / String.trim().isEmpty() is an inefficient way to validate a blank String.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_performance_ConsecutiveLiteralAppends",
  "title" : "Consecutive Literal Appends",
  "description" : "StringBuffer (or StringBuilder).append is called {0} consecutive times with literals. Use a single append with a single combined String.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_performance_ConsecutiveAppendsShouldReuse",
  "title" : "Consecutive Appends Should Reuse",
  "description" : "StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_performance_BigIntegerInstantiation",
  "title" : "Big Integer Instantiation",
  "description" : "Don''t create instances of already existing BigInteger and BigDecimal (ZERO, ONE, TEN)",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_performance_AvoidInstantiatingObjectsInLoops",
  "title" : "Avoid Instantiating Objects In Loops",
  "description" : "Avoid instantiating new objects inside loops",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_performance_AvoidFileStream",
  "title" : "Avoid File Stream",
  "description" : "Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_performance_AvoidCalendarDateCreation",
  "title" : "Avoid Calendar Date Creation",
  "description" : "A Calendar is used to get the current time, this is expensive.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_performance_AvoidArrayLoops",
  "title" : "Avoid Array Loops",
  "description" : "Arrays.copyOf or System.arraycopy are more efficient",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_performance_AppendCharacterWithChar",
  "title" : "Append Character With Char",
  "description" : "Avoid appending characters as strings in StringBuffer.append.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_performance_AddEmptyString",
  "title" : "Add Empty String",
  "description" : "Do not add empty strings",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_multithreading_UseNotifyAllInsteadOfNotify",
  "title" : "Use Notify All Instead Of Notify",
  "description" : "Call Thread.notifyAll() rather than Thread.notify()",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_multithreading_UseConcurrentHashMap",
  "title" : "Use Concurrent Hash Map",
  "description" : "If you run in Java5 or newer and have concurrent access, you should use the ConcurrentHashMap implementation",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_multithreading_UnsynchronizedStaticFormatter",
  "title" : "Unsynchronized Static Formatter",
  "description" : "Static Formatter objects should be accessed in a synchronized manner",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_multithreading_NonThreadSafeSingleton",
  "title" : "Non Thread Safe Singleton",
  "description" : "Singleton is not thread safe",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_multithreading_DoubleCheckedLocking",
  "title" : "Double Checked Locking",
  "description" : "Double checked locking is not thread safe in Java.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_multithreading_DontCallThreadRun",
  "title" : "Dont Call Thread Run",
  "description" : "Don't call Thread.run() explicitly, use Thread.start()",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_multithreading_DoNotUseThreads",
  "title" : "Do Not Use Threads",
  "description" : "To be compliant to J2EE, a webapp should not use any thread.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_multithreading_AvoidUsingVolatile",
  "title" : "Avoid Using Volatile",
  "description" : "Use of modifier volatile is not recommended.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_multithreading_AvoidThreadGroup",
  "title" : "Avoid Thread Group",
  "description" : "Avoid using java.lang.ThreadGroup; it is not thread safe",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_multithreading_AvoidSynchronizedStatement",
  "title" : "Avoid Synchronized Statement",
  "description" : "Use ReentrantLock rather than synchronization",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_multithreading_AvoidSynchronizedAtMethodLevel",
  "title" : "Avoid Synchronized At Method Level",
  "description" : "Use block level locking rather than method level synchronization",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_UselessOperationOnImmutable",
  "title" : "Useless Operation On Immutable",
  "description" : "An operation on an Immutable object (String, BigDecimal or BigInteger) won't change the object itself",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_UseProperClassLoader",
  "title" : "Use Proper Class Loader",
  "description" : "In J2EE, getClassLoader() might not work as expected.  Use Thread.currentThread().getContextClassLoader() instead.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_UseLocaleWithCaseConversions",
  "title" : "Use Locale With Case Conversions",
  "description" : "When doing a String.toLowerCase()/toUpperCase() call, use a Locale",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_UseEqualsToCompareStrings",
  "title" : "Use Equals To Compare Strings",
  "description" : "Use equals() to compare strings instead of ''=='' or ''!=''",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_UseCorrectExceptionLogging",
  "title" : "Use Correct Exception Logging",
  "description" : "Use the correct logging statement for logging exceptions",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_UnusedNullCheckInEquals",
  "title" : "Unused Null Check In Equals",
  "description" : "Invoke equals() on the object you''ve already ensured is not null",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_UnnecessaryConversionTemporary",
  "title" : "Unnecessary Conversion Temporary",
  "description" : "Avoid unnecessary temporaries when converting primitives to Strings",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_UnnecessaryCaseChange",
  "title" : "Unnecessary Case Change",
  "description" : "Using equalsIgnoreCase() is cleaner than using toUpperCase/toLowerCase().equals().",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_UnnecessaryBooleanAssertion",
  "title" : "Unnecessary Boolean Assertion",
  "description" : "assertTrue(true) or similar statements are unnecessary",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_UnconditionalIfStatement",
  "title" : "Unconditional If Statement",
  "description" : "Do not use 'if' statements that are always true or always false",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_TestClassWithoutTestCases",
  "title" : "Test Class Without Test Cases",
  "description" : "The class ''{0}'' might be a test class, but it contains no test cases.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_SuspiciousOctalEscape",
  "title" : "Suspicious Octal Escape",
  "description" : "Suspicious decimal characters following octal escape in string literal: {0}",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_SuspiciousHashcodeMethodName",
  "title" : "Suspicious Hashcode Method Name",
  "description" : "The method name and return type are suspiciously close to hashCode()",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_SuspiciousEqualsMethodName",
  "title" : "Suspicious Equals Method Name",
  "description" : "The method name and parameter number are suspiciously close to equals(Object)",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_StringBufferInstantiationWithChar",
  "title" : "String Buffer Instantiation With Char",
  "description" : "Argument to `new StringBuilder()` or `new StringBuffer()` is implicitly converted from char to int",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_StaticEJBFieldShouldBeFinal",
  "title" : "Static EJB Field Should Be Final",
  "description" : "EJB's shouldn't have non-final static fields",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_SingletonClassReturningNewInstance",
  "title" : "Singleton Class Returning New Instance",
  "description" : "getInstance method always creates a new object and hence does not comply to Singleton Design Pattern behaviour. Please review",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_SingleMethodSingleton",
  "title" : "Single Method Singleton",
  "description" : "Class contains multiple getInstance methods. Please review.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_SimpleDateFormatNeedsLocale",
  "title" : "Simple Date Format Needs Locale",
  "description" : "When instantiating a SimpleDateFormat object, specify a Locale",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_ReturnFromFinallyBlock",
  "title" : "Return From Finally Block",
  "description" : "Avoid returning from a finally block",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_ReturnEmptyCollectionRatherThanNull",
  "title" : "Return Empty Collection Rather Than Null",
  "description" : "Return an empty collection rather than 'null'.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_ProperLogger",
  "title" : "Proper Logger",
  "description" : "Logger should be defined private static final and have the correct class",
  "parameters" : [ {
    "name" : "loggerClass",
    "description" : "Class name of the logger"
  }, {
    "name" : "loggerName",
    "description" : "Name of the Logger instance variable"
  }, {
    "name" : "staticLoggerName",
    "description" : "Name of the static Logger variable"
  } ]
}, {
  "patternId" : "category_java_errorprone_ProperCloneImplementation",
  "title" : "Proper Clone Implementation",
  "description" : "Object clone() should be implemented with super.clone()",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_OverrideBothEqualsAndHashcode",
  "title" : "Override Both Equals And Hashcode",
  "description" : "Ensure you override both equals() and hashCode()",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_NullAssignment",
  "title" : "Null Assignment",
  "description" : "Assigning an Object to null is a code smell.  Consider refactoring.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_NonStaticInitializer",
  "title" : "Non Static Initializer",
  "description" : "Non-static initializers are confusing",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_NonSerializableClass",
  "title" : "Non Serializable Class",
  "description" : "The field ''{0}'' of serializable class ''{1}'' is of non-serializable type ''{2}''.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_NonCaseLabelInSwitchStatement",
  "title" : "Non Case Label In Switch Statement",
  "description" : "A non-case label was present in a switch statement",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_MoreThanOneLogger",
  "title" : "More Than One Logger",
  "description" : "Class contains more than one logger.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_MissingStaticMethodInNonInstantiatableClass",
  "title" : "Missing Static Method In Non Instantiatable Class",
  "description" : "Class cannot be instantiated and does not provide any static methods or fields",
  "parameters" : [ {
    "name" : "annotations",
    "description" : "If a constructor is annotated with one of these annotations, then the class is ignored."
  } ]
}, {
  "patternId" : "category_java_errorprone_MissingSerialVersionUID",
  "title" : "Missing Serial Version UID",
  "description" : "Classes implementing Serializable should set a serialVersionUID",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_MisplacedNullCheck",
  "title" : "Misplaced Null Check",
  "description" : "The null check here is misplaced; if the variable ''{0}'' is null there will be a NullPointerException",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_MethodWithSameNameAsEnclosingClass",
  "title" : "Method With Same Name As Enclosing Class",
  "description" : "A method should not have the same name as its containing class",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_JumbledIncrementer",
  "title" : "Jumbled Incrementer",
  "description" : "Avoid modifying an outer loop incrementer in an inner loop for update expression",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_JUnitStaticSuite",
  "title" : "JUnit Static Suite",
  "description" : "You have a suite() method that is not both public and static, so JUnit won't call it to get your TestSuite.  Is that what you wanted to do?",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_JUnitSpelling",
  "title" : "JUnit Spelling",
  "description" : "You may have misspelled a JUnit framework method (setUp or tearDown)",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_InvalidLogMessageFormat",
  "title" : "Invalid Log Message Format",
  "description" : "Invalid message format",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_InstantiationToGetClass",
  "title" : "Instantiation To Get Class",
  "description" : "Avoid instantiating an object just to call getClass() on it; use the .class public member instead",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_ImplicitSwitchFallThrough",
  "title" : "Implicit Switch Fall Through",
  "description" : "This switch case may be reached by fallthrough from the previous case",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_IdempotentOperations",
  "title" : "Idempotent Operations",
  "description" : "Avoid idempotent operations (like assigning a variable to itself).",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_FinalizeShouldBeProtected",
  "title" : "Finalize Should Be Protected",
  "description" : "If you override finalize(), make it protected",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_FinalizeOverloaded",
  "title" : "Finalize Overloaded",
  "description" : "Finalize methods should not be overloaded",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_FinalizeOnlyCallsSuperFinalize",
  "title" : "Finalize Only Calls Super Finalize",
  "description" : "Finalize should do something besides just calling super.finalize()",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_FinalizeDoesNotCallSuperFinalize",
  "title" : "Finalize Does Not Call Super Finalize",
  "description" : "Last statement in finalize method should be a call to super.finalize()",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_EqualsNull",
  "title" : "Equals Null",
  "description" : "Avoid using equals() to compare against null",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_EmptyFinalizer",
  "title" : "Empty Finalizer",
  "description" : "Avoid empty finalize methods",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_EmptyCatchBlock",
  "title" : "Empty Catch Block",
  "description" : "Avoid empty catch blocks",
  "parameters" : [ {
    "name" : "allowCommentedBlocks",
    "description" : "Empty blocks containing comments will be skipped"
  }, {
    "name" : "allowExceptionNameRegex",
    "description" : "Empty blocks catching exceptions with names matching this regular expression will be skipped"
  } ]
}, {
  "patternId" : "category_java_errorprone_DontUseFloatTypeForLoopIndices",
  "title" : "Dont Use Float Type For Loop Indices",
  "description" : "Don't use floating point for loop indices. If you must use floating point, use double.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_DontImportSun",
  "title" : "Dont Import Sun",
  "description" : "Avoid importing anything from the 'sun.*' packages",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_DoNotThrowExceptionInFinally",
  "title" : "Do Not Throw Exception In Finally",
  "description" : "A throw statement in a finally block makes the control flow hard to understand.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_DoNotTerminateVM",
  "title" : "Do Not Terminate VM",
  "description" : "System.exit() should not be used in J2EE/JEE apps",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_DoNotHardCodeSDCard",
  "title" : "Do Not Hard Code SD Card",
  "description" : "Do not hardcode /sdcard.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_DoNotExtendJavaLangThrowable",
  "title" : "Do Not Extend Java Lang Throwable",
  "description" : "Exceptions should not extend java.lang.Throwable",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_DoNotCallGarbageCollectionExplicitly",
  "title" : "Do Not Call Garbage Collection Explicitly",
  "description" : "Do not explicitly trigger a garbage collection.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_DetachedTestCase",
  "title" : "Detached Test Case",
  "description" : "Probable detached JUnit test case.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_ConstructorCallsOverridableMethod",
  "title" : "Constructor Calls Overridable Method",
  "description" : "Overridable {0} called during object construction{1}",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_ConfusingArgumentToVarargsMethod",
  "title" : "Confusing Argument To Varargs Method",
  "description" : "Unclear if a varargs or non-varargs call is intended. Cast to {0} or {0}[], or pass varargs parameters separately to clarify intent.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_ComparisonWithNaN",
  "title" : "Comparison With Na N",
  "description" : "Comparisons with NaN always return false",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_CompareObjectsWithEquals",
  "title" : "Compare Objects With Equals",
  "description" : "Use equals() to compare object references.",
  "parameters" : [ {
    "name" : "typesThatCompareByReference",
    "description" : "List of canonical type names for which reference comparison is allowed."
  } ]
}, {
  "patternId" : "category_java_errorprone_CloseResource",
  "title" : "Close Resource",
  "description" : "Ensure that resources like this {0} object are closed after use",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_CloneMethodReturnTypeMustMatchClassName",
  "title" : "Clone Method Return Type Must Match Class Name",
  "description" : "The return type of the clone() method must be the class name when implements Cloneable",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_CloneMethodMustImplementCloneable",
  "title" : "Clone Method Must Implement Cloneable",
  "description" : "clone() method should be implemented only if implementing Cloneable interface",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_CloneMethodMustBePublic",
  "title" : "Clone Method Must Be Public",
  "description" : "clone() method must be public if the class implements Cloneable",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_ClassCastExceptionWithToArray",
  "title" : "Class Cast Exception With To Array",
  "description" : "This usage of the Collection.toArray() method will throw a ClassCastException.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_CheckSkipResult",
  "title" : "Check Skip Result",
  "description" : "Check the value returned by the skip() method of an InputStream to see if the requested number of bytes has been skipped.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_CallSuperLast",
  "title" : "Call Super Last",
  "description" : "super should be called at the end of the method",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_CallSuperFirst",
  "title" : "Call Super First",
  "description" : "super should be called at the start of the method",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_BrokenNullCheck",
  "title" : "Broken Null Check",
  "description" : "This expression will throw a NullPointerException",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_AvoidUsingOctalValues",
  "title" : "Avoid Using Octal Values",
  "description" : "Do not start a literal by 0 unless it's an octal value",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_AvoidMultipleUnaryOperators",
  "title" : "Avoid Multiple Unary Operators",
  "description" : "Using multiple unary operators may be a bug, and/or is confusing.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_AvoidLosingExceptionInformation",
  "title" : "Avoid Losing Exception Information",
  "description" : "Avoid statements in a catch block that invoke accessors on the exception without using the information",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_AvoidLiteralsInIfCondition",
  "title" : "Avoid Literals In If Condition",
  "description" : "Avoid using literals in if statements",
  "parameters" : [ {
    "name" : "ignoreExpressions",
    "description" : "If true, only literals in simple if conditions are considered. Otherwise literals in expressions are checked, too."
  }, {
    "name" : "ignoreMagicNumbers",
    "description" : "Comma-separated list of magic numbers, that should be ignored"
  } ]
}, {
  "patternId" : "category_java_errorprone_AvoidInstanceofChecksInCatchClause",
  "title" : "Avoid Instanceof Checks In Catch Clause",
  "description" : "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_AvoidFieldNameMatchingTypeName",
  "title" : "Avoid Field Name Matching Type Name",
  "description" : "It is somewhat confusing to have a field name matching the declaring class name",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_AvoidFieldNameMatchingMethodName",
  "title" : "Avoid Field Name Matching Method Name",
  "description" : "Field {0} has the same name as a method",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_AvoidEnumAsIdentifier",
  "title" : "Avoid Enum As Identifier",
  "description" : "Avoid using enum as an identifier; it's a reserved word in JDK 1.5",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_AvoidDuplicateLiterals",
  "title" : "Avoid Duplicate Literals",
  "description" : "The String literal {0} appears {1} times in this file; the first occurrence is on line {2}",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_AvoidDecimalLiteralsInBigDecimalConstructor",
  "title" : "Avoid Decimal Literals In Big Decimal Constructor",
  "description" : "Avoid creating BigDecimal with a decimal (float/double) literal. Use a String literal",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_AvoidCatchingThrowable",
  "title" : "Avoid Catching Throwable",
  "description" : "A catch statement should never catch throwable since it includes errors.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_AvoidCatchingNPE",
  "title" : "Avoid Catching NPE",
  "description" : "Avoid catching NullPointerException; consider removing the cause of the NPE.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_AvoidCallingFinalize",
  "title" : "Avoid Calling Finalize",
  "description" : "Avoid calling finalize() explicitly",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_AvoidBranchingStatementAsLastInLoop",
  "title" : "Avoid Branching Statement As Last In Loop",
  "description" : "Avoid using a branching statement as the last in a loop.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_AvoidAssertAsIdentifier",
  "title" : "Avoid Assert As Identifier",
  "description" : "Avoid using assert as an identifier; it became a reserved word in JDK 1.4",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_AvoidAccessibilityAlteration",
  "title" : "Avoid Accessibility Alteration",
  "description" : "You should not modify visibility of constructors, methods or fields using setAccessible()",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_AssignmentToNonFinalStatic",
  "title" : "Assignment To Non Final Static",
  "description" : "Possible unsafe assignment to non-final static field ''{0}'' in a constructor.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_errorprone_AssignmentInOperand",
  "title" : "Assignment In Operand",
  "description" : "Avoid assignments in operands",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_documentation_UncommentedEmptyMethodBody",
  "title" : "Uncommented Empty Method Body",
  "description" : "Document empty method body",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_documentation_UncommentedEmptyConstructor",
  "title" : "Uncommented Empty Constructor",
  "description" : "Document empty constructor",
  "parameters" : [ {
    "name" : "ignoreExplicitConstructorInvocation",
    "description" : "Ignore explicit constructor invocation when deciding whether constructor is empty or not"
  } ]
}, {
  "patternId" : "category_java_documentation_CommentSize",
  "title" : "Comment Size",
  "description" : "Comment is too large",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_documentation_CommentRequired",
  "title" : "Comment Required",
  "description" : "Comment is required",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_documentation_CommentContent",
  "title" : "Comment Content",
  "description" : "Invalid words or phrases found",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_design_UselessOverridingMethod",
  "title" : "Useless Overriding Method",
  "description" : "Overriding method merely calls super",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_design_UseUtilityClass",
  "title" : "Use Utility Class",
  "description" : "All methods are static.  Consider using a utility class instead. Alternatively, you could add a private constructor or make the class abstract to silence this warning.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_design_UseObjectForClearerAPI",
  "title" : "Use Object For Clearer API",
  "description" : "Rather than using a lot of String arguments, consider using a container object for those values.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_design_TooManyMethods",
  "title" : "Too Many Methods",
  "description" : "This class has too many methods, consider refactoring it.",
  "parameters" : [ {
    "name" : "maxmethods",
    "description" : "The method count reporting threshold"
  } ]
}, {
  "patternId" : "category_java_design_TooManyFields",
  "title" : "Too Many Fields",
  "description" : "Too many fields",
  "parameters" : [ {
    "name" : "maxfields",
    "description" : "Max allowable fields"
  } ]
}, {
  "patternId" : "category_java_design_SwitchDensity",
  "title" : "Switch Density",
  "description" : "A high ratio of statements to labels in a switch statement.  Consider refactoring.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_design_SingularField",
  "title" : "Singular Field",
  "description" : "Perhaps ''{0}'' could be replaced by a local variable.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_design_SimplifyConditional",
  "title" : "Simplify Conditional",
  "description" : "No need to check for null before an instanceof",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_design_SimplifyBooleanReturns",
  "title" : "Simplify Boolean Returns",
  "description" : "This if statement can be replaced by `{0}`",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_design_SimplifyBooleanExpressions",
  "title" : "Simplify Boolean Expressions",
  "description" : "Avoid unnecessary comparisons in boolean expressions",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_design_SimplifiedTernary",
  "title" : "Simplified Ternary",
  "description" : "This conditional expression can be simplified with || or &&",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_design_SignatureDeclareThrowsException",
  "title" : "Signature Declare Throws Exception",
  "description" : "A method/constructor should not explicitly throw java.lang.Exception",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_design_NcssCount",
  "title" : "NCSS Count",
  "description" : "The {0} ''{1}'' has a NCSS line count of {2}.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_design_NPathComplexity",
  "title" : "NPath Complexity",
  "description" : "The {0} ''{1}'' has an NPath complexity of {2}, current threshold is {3}",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_design_MutableStaticState",
  "title" : "Mutable Static State",
  "description" : "Do not use non-final non-private static fields",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_design_LoosePackageCoupling",
  "title" : "Loose Package Coupling",
  "description" : "Use of ''{0}'' outside of package hierarchy ''{1}'' is not recommended; use recommended classes instead",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_design_LogicInversion",
  "title" : "Logic Inversion",
  "description" : "Use opposite operator instead of the logic complement operator.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_design_LawOfDemeter",
  "title" : "Law Of Demeter",
  "description" : "Potential violation of the law of Demeter ({0})",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_design_InvalidJavaBean",
  "title" : "Invalid Java Bean",
  "description" : "The bean ''{0}'' is missing a getter for property ''{1}''.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_design_ImmutableField",
  "title" : "Immutable Field",
  "description" : "Field ''{0}'' may be declared final",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_design_GodClass",
  "title" : "God Class",
  "description" : "Possible God Class (WMC={0}, ATFD={2}, TCC={1})",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_design_FinalFieldCouldBeStatic",
  "title" : "Final Field Could Be Static",
  "description" : "This final field could be made static",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_design_ExcessivePublicCount",
  "title" : "Excessive Public Count",
  "description" : "This class has a bunch of public methods and attributes",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_design_ExcessiveParameterList",
  "title" : "Excessive Parameter List",
  "description" : "Avoid long parameter lists.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_design_ExcessiveImports",
  "title" : "Excessive Imports",
  "description" : "A high number of imports can indicate a high degree of coupling within an object.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_design_ExceptionAsFlowControl",
  "title" : "Exception As Flow Control",
  "description" : "Exception thrown at line {0} is caught in this block.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_design_DoNotExtendJavaLangError",
  "title" : "Do Not Extend Java Lang Error",
  "description" : "Exceptions should not extend java.lang.Error",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_design_DataClass",
  "title" : "Data Class",
  "description" : "The class ''{0}'' is suspected to be a Data Class (WOC={1}, NOPA={2}, NOAM={3}, WMC={4})",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_design_CyclomaticComplexity",
  "title" : "Cyclomatic Complexity",
  "description" : "The {0} ''{1}'' has a{2} cyclomatic complexity of {3}.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_design_CouplingBetweenObjects",
  "title" : "Coupling Between Objects",
  "description" : "High amount of different objects as members denotes a high coupling",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_design_CollapsibleIfStatements",
  "title" : "Collapsible If Statements",
  "description" : "This if statement could be combined with its parent",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_design_CognitiveComplexity",
  "title" : "Cognitive Complexity",
  "description" : "The {0} ''{1}'' has a cognitive complexity of {2}, current threshold is {3}",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_design_ClassWithOnlyPrivateConstructorsShouldBeFinal",
  "title" : "Class With Only Private Constructors Should Be Final",
  "description" : "This class has only private constructors and may be final",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_design_AvoidUncheckedExceptionsInSignatures",
  "title" : "Avoid Unchecked Exceptions In Signatures",
  "description" : "A method or constructor should not explicitly declare unchecked exceptions in its ''throws'' clause",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_design_AvoidThrowingRawExceptionTypes",
  "title" : "Avoid Throwing Raw Exception Types",
  "description" : "Avoid throwing raw exception types.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_design_AvoidThrowingNullPointerException",
  "title" : "Avoid Throwing Null Pointer Exception",
  "description" : "Avoid throwing null pointer exceptions.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_design_AvoidThrowingNewInstanceOfSameException",
  "title" : "Avoid Throwing New Instance Of Same Exception",
  "description" : "A catch statement that catches an exception only to wrap it in a new instance of the same type of exception and throw it should be avoided",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_design_AvoidRethrowingException",
  "title" : "Avoid Rethrowing Exception",
  "description" : "A catch statement that catches an exception only to rethrow it should be avoided.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_design_AvoidDeeplyNestedIfStmts",
  "title" : "Avoid Deeply Nested If Stmts",
  "description" : "Deeply nested if..then statements are hard to read",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_design_AvoidCatchingGenericException",
  "title" : "Avoid Catching Generic Exception",
  "description" : "Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_design_AbstractClassWithoutAnyMethod",
  "title" : "Abstract Class Without Any Method",
  "description" : "No abstract method which means that the keyword is most likely used to prevent instantiation. Use a private or protected constructor instead.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_UselessQualifiedThis",
  "title" : "Useless Qualified This",
  "description" : "Useless qualified this usage in the same class.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_UselessParentheses",
  "title" : "Useless Parentheses",
  "description" : "Useless parentheses.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_UseUnderscoresInNumericLiterals",
  "title" : "Use Underscores In Numeric Literals",
  "description" : "Number {0} should separate every third digit with an underscore",
  "parameters" : [ {
    "name" : "acceptableDecimalLength",
    "description" : "Length under which literals in base 10 are not required to have underscores"
  } ]
}, {
  "patternId" : "category_java_codestyle_UseShortArrayInitializer",
  "title" : "Use Short Array Initializer",
  "description" : "Array initialization can be written shorter",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_UseExplicitTypes",
  "title" : "Use Explicit Types",
  "description" : "Use Explicit Types",
  "parameters" : [ {
    "name" : "allowCtors",
    "description" : "Allow when variables are directly initialized with a constructor call"
  }, {
    "name" : "allowLiterals",
    "description" : "Allow when variables are directly initialized with literals"
  } ]
}, {
  "patternId" : "category_java_codestyle_UseDiamondOperator",
  "title" : "Use Diamond Operator",
  "description" : "Explicit type arguments can be replaced by a diamond: `{0}`",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_UnnecessarySemicolon",
  "title" : "Unnecessary Semicolon",
  "description" : "Unnecessary semicolon",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_UnnecessaryReturn",
  "title" : "Unnecessary Return",
  "description" : "Unnecessary return statement",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_UnnecessaryModifier",
  "title" : "Unnecessary Modifier",
  "description" : "Unnecessary modifier{0} on {1} ''{2}''{3}",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_UnnecessaryLocalBeforeReturn",
  "title" : "Unnecessary Local Before Return",
  "description" : "Consider simply returning the value vs storing it in local variable ''{0}''",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_UnnecessaryImport",
  "title" : "Unnecessary Import",
  "description" : "Unnecessary import ''{0}''",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_UnnecessaryFullyQualifiedName",
  "title" : "Unnecessary Fully Qualified Name",
  "description" : "Unnecessary qualifier ''{0}'': ''{1}'' is already in scope{2}",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_UnnecessaryConstructor",
  "title" : "Unnecessary Constructor",
  "description" : "Avoid unnecessary constructors - the compiler will generate these for you",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_UnnecessaryCast",
  "title" : "Unnecessary Cast",
  "description" : "Unnecessary cast ({0})",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_UnnecessaryBoxing",
  "title" : "Unnecessary Boxing",
  "description" : "Unnecessary {0}",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_UnnecessaryAnnotationValueElement",
  "title" : "Unnecessary Annotation Value ELement",
  "description" : "Avoid the use of value in annotations when it's the only element",
  "parameters" : [ {
    "name" : "java7Compatibility",
    "description" : "If disabled, the rule shows also violations that are applicable for java8+"
  } ]
}, {
  "patternId" : "category_java_codestyle_TooManyStaticImports",
  "title" : "Too Many Static Imports",
  "description" : "Too many static imports may lead to messy code",
  "parameters" : [ {
    "name" : "maximumStaticImports",
    "description" : "All static imports can be disallowed by setting this to 0"
  } ]
}, {
  "patternId" : "category_java_codestyle_ShortVariable",
  "title" : "Short Variable",
  "description" : "Avoid variables with short names like {0}",
  "parameters" : [ {
    "name" : "minimum",
    "description" : "Number of characters that are required as a minimum for a variable name."
  } ]
}, {
  "patternId" : "category_java_codestyle_ShortMethodName",
  "title" : "Short Method Name",
  "description" : "Avoid using short method names",
  "parameters" : [ {
    "name" : "minimum",
    "description" : "Number of characters that are required as a minimum for a method name."
  } ]
}, {
  "patternId" : "category_java_codestyle_ShortClassName",
  "title" : "Short Class Name",
  "description" : "Avoid short class names like {0}",
  "parameters" : [ {
    "name" : "minimum",
    "description" : "Number of characters that are required as a minimum for a class name."
  } ]
}, {
  "patternId" : "category_java_codestyle_RemoteSessionInterfaceNamingConvention",
  "title" : "Remote Session Interface Naming Convention",
  "description" : "Remote Home interface of a Session EJB should be suffixed by 'Home'",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_RemoteInterfaceNamingConvention",
  "title" : "Remote Interface Naming Convention",
  "description" : "Remote Interface of a Session EJB should NOT be suffixed",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_PrematureDeclaration",
  "title" : "Premature Declaration",
  "description" : "Declaration of ''{0}'' can be moved closer to its usages",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_PackageCase",
  "title" : "Package Case",
  "description" : "Package name contains upper case characters",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_OnlyOneReturn",
  "title" : "Only One Return",
  "description" : "A method should have only one exit point, and that should be the last statement in the method",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_NoPackage",
  "title" : "No Package",
  "description" : "All classes, interfaces, enums and annotations must belong to a named package",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_MethodNamingConventions",
  "title" : "Method Naming Conventions",
  "description" : "The {0} name ''{1}'' doesn''t match ''{2}''",
  "parameters" : [ {
    "name" : "junit3TestPattern",
    "description" : "junit3TestPattern: Regex which applies to JUnit 3 test method names"
  }, {
    "name" : "junit4TestPattern",
    "description" : "junit4TestPattern: Regex which applies to JUnit 4 test method names"
  }, {
    "name" : "junit5TestPattern",
    "description" : "junit5TestPattern: Regex which applies to JUnit 5 test method names"
  }, {
    "name" : "methodPattern",
    "description" : "methodPattern: Regex which applies to instance method names"
  }, {
    "name" : "nativePattern",
    "description" : "nativePattern: Regex which applies to native method names"
  }, {
    "name" : "staticPattern",
    "description" : "staticPattern: Regex which applies to static method names"
  } ]
}, {
  "patternId" : "category_java_codestyle_MethodArgumentCouldBeFinal",
  "title" : "Method Argument Could Be Final",
  "description" : "Parameter ''{0}'' is not assigned and could be declared final",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_MDBAndSessionBeanNamingConvention",
  "title" : "MDB And Session Bean Naming Convention",
  "description" : "SessionBean or MessageBean should be suffixed by Bean",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_LongVariable",
  "title" : "Long Variable",
  "description" : "Avoid excessively long variable names like {0}",
  "parameters" : [ {
    "name" : "minimum",
    "description" : "The variable length reporting threshold"
  } ]
}, {
  "patternId" : "category_java_codestyle_LocalVariableNamingConventions",
  "title" : "Local Variable Naming Conventions",
  "description" : "The {0} name ''{1}'' doesn''t match ''{2}''",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_LocalVariableCouldBeFinal",
  "title" : "Local Variable Could Be Final",
  "description" : "Local variable ''{0}'' could be declared final",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_LocalInterfaceSessionNamingConvention",
  "title" : "Local Interface Session Naming Convention",
  "description" : "The Local Interface of a Session EJB should be suffixed by 'Local'",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_LocalHomeNamingConvention",
  "title" : "Local Home Naming Convention",
  "description" : "The Local Home interface of a Session EJB should be suffixed by 'LocalHome'",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_LinguisticNaming",
  "title" : "Linguistic Naming",
  "description" : "Linguistics Antipattern - Method name and return type is inconsistent linguistically",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_LambdaCanBeMethodReference",
  "title" : "Lambda Can Be Method Reference",
  "description" : "Lambda expression could be written as a method reference: `{0}`",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_IdenticalCatchBranches",
  "title" : "Identical Catch Branches",
  "description" : "''catch'' branch identical to ''{0}'' branch",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_GenericsNaming",
  "title" : "Generics Naming",
  "description" : "Generics names should be a one letter long and upper case.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_FormalParameterNamingConventions",
  "title" : "Formal Parameter Naming Conventions",
  "description" : "The {0} name ''{1}'' doesn''t match ''{2}''",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_ForLoopShouldBeWhileLoop",
  "title" : "For Loop Should Be While Loop",
  "description" : "This for loop could be simplified to a while loop",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_FinalParameterInAbstractMethod",
  "title" : "Final Parameter In Abstract Method",
  "description" : "Final parameter in abstract method",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_FieldNamingConventions",
  "title" : "Field Naming Conventions",
  "description" : "The {0} name ''{1}'' doesn''t match ''{2}''",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_FieldDeclarationsShouldBeAtStartOfClass",
  "title" : "Field Declarations Should Be At Start Of Class",
  "description" : "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_ExtendsObject",
  "title" : "Extends Object",
  "description" : "No need to explicitly extend Object.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_EmptyMethodInAbstractClassShouldBeAbstract",
  "title" : "Empty Method In Abstract Class Should Be Abstract",
  "description" : "An empty method in an abstract class should be abstract instead",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_EmptyControlStatement",
  "title" : "Empty Control Statement",
  "description" : "This control statement has an empty branch",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_ControlStatementBraces",
  "title" : "Control Statement Braces",
  "description" : "This statement should have braces",
  "parameters" : [ {
    "name" : "allowEmptyLoop",
    "description" : "Allow loops with an empty statement, e.g. 'while(true);'"
  }, {
    "name" : "checkCaseStmt",
    "description" : "Require that cases of a switch have braces"
  }, {
    "name" : "checkDoWhileStmt",
    "description" : "Require that 'do ... while' loops use braces"
  }, {
    "name" : "checkForStmt",
    "description" : "Require that 'for' loops should use braces"
  }, {
    "name" : "checkIfElseStmt",
    "description" : "Require that 'if ... else' statements use braces"
  }, {
    "name" : "checkSingleIfStmt",
    "description" : "Require that 'if' statements with a single branch use braces"
  }, {
    "name" : "checkWhileStmt",
    "description" : "Require that 'while' loops use braces"
  } ]
}, {
  "patternId" : "category_java_codestyle_ConfusingTernary",
  "title" : "Confusing Ternary",
  "description" : "Avoid if (x != y) ..; else ..;",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_CommentDefaultAccessModifier",
  "title" : "Comment Default Access Modifier",
  "description" : "Missing commented default access modifier on {0} ''{1}''",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_ClassNamingConventions",
  "title" : "Class Naming Conventions",
  "description" : "The {0} name ''{1}'' doesn''t match ''{2}''",
  "parameters" : [ {
    "name" : "abstractClassPattern",
    "description" : "abstractClassPattern: Regex which applies to abstract class names"
  }, {
    "name" : "annotationPattern",
    "description" : "annotationPattern: Regex which applies to annotation names"
  }, {
    "name" : "classPattern",
    "description" : "classPattern: Regex which applies to concrete class names"
  }, {
    "name" : "enumPattern",
    "description" : "enumPattern: Regex which applies to enum names"
  }, {
    "name" : "interfacePattern",
    "description" : "interfacePattern: Regex which applies to interface names"
  }, {
    "name" : "testClassPattern",
    "description" : "testClassPattern: Regex which applies to test class names"
  }, {
    "name" : "utilityClassPattern",
    "description" : "utilityClassPattern: Regex which applies to utility class names"
  } ]
}, {
  "patternId" : "category_java_codestyle_CallSuperInConstructor",
  "title" : "Call Super In Constructor",
  "description" : "It is a good practice to call super() in a constructor",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_BooleanGetMethodName",
  "title" : "Boolean Get Method Name",
  "description" : "A 'getX()' method which returns a boolean should be named 'isX()'",
  "parameters" : [ {
    "name" : "checkParameterizedMethods",
    "description" : "Check parameterized methods"
  } ]
}, {
  "patternId" : "category_java_codestyle_AvoidUsingNativeCode",
  "title" : "Avoid Using Native Code",
  "description" : "The use of native code is not recommended.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_AvoidProtectedMethodInFinalClassNotExtending",
  "title" : "Avoid Protected Method In Final Class Not Extending",
  "description" : "Avoid protected methods in a final class that doesn't extend anything other than Object.  Change to private or package access.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_AvoidProtectedFieldInFinalClass",
  "title" : "Avoid Protected Field In Final Class",
  "description" : "Avoid protected fields in a final class.  Change to private or package access.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_AvoidDollarSigns",
  "title" : "Avoid Dollar Signs",
  "description" : "Avoid using dollar signs in variable/method/class/interface names",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_codestyle_AtLeastOneConstructor",
  "title" : "At Least One Constructor",
  "description" : "Each class should declare at least one constructor",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_WhileLoopWithLiteralBoolean",
  "title" : "While Loop With Literal Boolean",
  "description" : "The loop can be simplified.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_UseVarargs",
  "title" : "Use Varargs",
  "description" : "Consider using varargs for methods or constructors which take an array the last parameter.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_UseTryWithResources",
  "title" : "Use Try With Resources",
  "description" : "Consider using a try-with-resources statement instead of explicitly closing the resource",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_UseStandardCharsets",
  "title" : "Use Standard Charsets",
  "description" : "Please use StandardCharsets constants",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_UseEnumCollections",
  "title" : "Use Enum Collections",
  "description" : "This collection could be an {0}",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_UseCollectionIsEmpty",
  "title" : "Use Collection Is Empty",
  "description" : "Substitute calls to size() == 0 (or size() != 0, size() > 0, size() < 1) with calls to isEmpty()",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_UnusedPrivateMethod",
  "title" : "Unused Private Method",
  "description" : "Avoid unused private methods.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_UnusedPrivateField",
  "title" : "Unused Private Field",
  "description" : "Avoid unused private fields.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_UnusedLocalVariable",
  "title" : "Unused Local Variable",
  "description" : "Avoid unused local variables.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_UnusedFormalParameter",
  "title" : "Unused Formal Parameter",
  "description" : "Avoid unused {0} parameters.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_UnusedAssignment",
  "title" : "Unused Assignment",
  "description" : "The value assigned to this variable is never used or always overwritten",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_UnnecessaryVarargsArrayCreation",
  "title" : "Unnecessary Varargs Array Creation",
  "description" : "Unnecessary explicit array creation for varargs method call",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_SystemPrintln",
  "title" : "System Println",
  "description" : "Usage of System.out/err",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_SwitchStmtsShouldHaveDefault",
  "title" : "Switch Stmts Should Have Default",
  "description" : "Switch statements should be exhaustive, add a default case (or missing enum branches)",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_SimplifiableTestAssertion",
  "title" : "Simplifiable Test Assertion",
  "description" : "Assertion may be simplified using {0}",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_ReplaceVectorWithList",
  "title" : "Replace Vector With List",
  "description" : "Consider replacing this Vector with the newer java.util.List",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_ReplaceHashtableWithMap",
  "title" : "Replace Hashtable With Map",
  "description" : "Consider replacing this Hashtable with the newer java.util.Map",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_ReplaceEnumerationWithIterator",
  "title" : "Replace Enumeration With Iterator",
  "description" : "Consider replacing this Enumeration with the newer java.util.Iterator",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_PrimitiveWrapperInstantiation",
  "title" : "Primitive Wrapper Instantiation",
  "description" : "Do not use `new {0}(...)`, prefer `{0}.valueOf(...)`",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_PreserveStackTrace",
  "title" : "Preserve Stack Trace",
  "description" : "Thrown exception does not preserve the stack trace of exception ''{0}'' on all code paths",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_OneDeclarationPerLine",
  "title" : "One Declaration Per Line",
  "description" : "Use one line for each declaration, it enhances code readability.",
  "parameters" : [ {
    "name" : "strictMode",
    "description" : "If true, mark combined declaration even if the declarations are on separate lines."
  } ]
}, {
  "patternId" : "category_java_bestpractices_MissingOverride",
  "title" : "Missing Override",
  "description" : "The method ''{0}'' is missing an @Override annotation.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_MethodReturnsInternalArray",
  "title" : "Method Returns Internal Array",
  "description" : "Returning ''{0}'' may expose an internal array.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_LooseCoupling",
  "title" : "Loose Coupling",
  "description" : "Avoid using implementation types like ''{0}''; use the interface instead",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_LiteralsFirstInComparisons",
  "title" : "Literals First In Comparisons",
  "description" : "Position literals first in String comparisons",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_JUnitUseExpected",
  "title" : "JUnit Use Expected",
  "description" : "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_JUnitTestsShouldIncludeAssert",
  "title" : "JUnit Tests Should Include Assert",
  "description" : "JUnit tests should include assert() or fail()",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_JUnitTestContainsTooManyAsserts",
  "title" : "JUnit Test Contains Too Many Asserts",
  "description" : "Unit tests should not contain more than ${maximumAsserts} assert(s).",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_JUnitAssertionsShouldIncludeMessage",
  "title" : "JUnit Assertions Should Include Message",
  "description" : "JUnit assertions should include a message",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_JUnit5TestShouldBePackagePrivate",
  "title" : "JUnit5Test Should Be Package Private",
  "description" : "JUnit 5 tests should be package-private.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_JUnit4TestShouldUseTestAnnotation",
  "title" : "JUnit4 Test Should Use Test Annotation",
  "description" : "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
  "parameters" : [ {
    "name" : "testClassPattern",
    "description" : "The regex pattern used to identify test classes"
  } ]
}, {
  "patternId" : "category_java_bestpractices_JUnit4TestShouldUseBeforeAnnotation",
  "title" : "JUnit4 Test Should Use Before Annotation",
  "description" : "JUnit 4 tests that set up tests should use the @Before annotation, JUnit5 tests should use @BeforeEach or @BeforeAll",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_JUnit4TestShouldUseAfterAnnotation",
  "title" : "JUnit4 Test Should Use After Annotation",
  "description" : "JUnit 4 tests that clean up tests should use the @After annotation, JUnit5 tests should use @AfterEach or @AfterAll",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_JUnit4SuitesShouldUseSuiteAnnotation",
  "title" : "JUnit4Suites Should Use Suite Annotation",
  "description" : "JUnit 4 indicates test suites via annotations, not the suite method.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_GuardLogStatement",
  "title" : "Guard Log Statement",
  "description" : "Logger calls should be surrounded by log level guards.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_ForLoopVariableCount",
  "title" : "For Loop Variable Count",
  "description" : "Too many control variables in the 'for' statement",
  "parameters" : [ {
    "name" : "maximumVariables",
    "description" : "A regular for statement will have 1 control variable"
  } ]
}, {
  "patternId" : "category_java_bestpractices_ForLoopCanBeForeach",
  "title" : "For Loop Can Be Foreach",
  "description" : "This 'for' loop can be replaced by a 'foreach' loop",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_DoubleBraceInitialization",
  "title" : "Double Brace Initialization",
  "description" : "Double-brace initialization should be avoided",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_DefaultLabelNotLastInSwitchStmt",
  "title" : "Default Label Not Last In Switch Stmt",
  "description" : "The default label should be the last label in a switch statement",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_ConstantsInInterface",
  "title" : "Constants In Interface",
  "description" : "Using constants in interfaces is a bad practice.",
  "parameters" : [ {
    "name" : "ignoreIfHasMethods",
    "description" : "Whether to ignore constants in interfaces if the interface defines any methods"
  } ]
}, {
  "patternId" : "category_java_bestpractices_CheckResultSet",
  "title" : "Check Result Set",
  "description" : "Always check the return of one of the navigation method (next,previous,first,last) of a ResultSet.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_AvoidUsingHardCodedIP",
  "title" : "Avoid Using Hard Coded IP",
  "description" : "Do not hard code the IP address ${variableName}",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_AvoidStringBufferField",
  "title" : "Avoid String Buffer Field",
  "description" : "StringBuffers can grow quite a lot, and so may become a source of memory leak (if the owning class has a long life time).",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_AvoidReassigningParameters",
  "title" : "Avoid Reassigning Parameters",
  "description" : "Avoid reassigning parameters.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_AvoidReassigningLoopVariables",
  "title" : "Avoid Reassigning Loop Variables",
  "description" : "Avoid reassigning the loop control variable ''{0}''",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_AvoidReassigningCatchVariables",
  "title" : "Avoid Reassigning Catch Variables",
  "description" : "Avoid reassigning caught exception ''{0}''",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_AvoidPrintStackTrace",
  "title" : "Avoid Print Stack Trace",
  "description" : "Avoid printStackTrace(); use a logger call instead.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_AvoidMessageDigestField",
  "title" : "Avoid Message Digest Field",
  "description" : "You shouldn't declare field of MessageDigest type, because unsynchronized access could cause problems",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_ArrayIsStoredDirectly",
  "title" : "Array Is Stored Directly",
  "description" : "The user-supplied array ''{0}'' is stored directly.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_AccessorMethodGeneration",
  "title" : "Accessor Method Generation",
  "description" : "Consider giving this member package visibility to access it from {0} without a synthetic accessor method",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_AccessorClassGeneration",
  "title" : "Accessor Class Generation",
  "description" : "Avoid instantiation through private constructors from outside of the constructor's class.",
  "parameters" : [ ]
}, {
  "patternId" : "category_java_bestpractices_AbstractClassWithoutAbstractMethod",
  "title" : "Abstract Class Without Abstract Method",
  "description" : "This abstract class does not have any abstract methods",
  "parameters" : [ ]
}, {
  "patternId" : "category_ecmascript_performance_AvoidConsoleStatements",
  "title" : "Avoid Console Statements",
  "description" : "Avoid console statements since they negatively impact performance",
  "parameters" : [ ]
}, {
  "patternId" : "category_ecmascript_errorprone_InaccurateNumericLiteral",
  "title" : "Inaccurate Numeric Literal",
  "description" : "The numeric literal ''{0}'' will have at different value at runtime.",
  "parameters" : [ ]
}, {
  "patternId" : "category_ecmascript_errorprone_EqualComparison",
  "title" : "Equal Comparison",
  "description" : "Use '==='/'!==' to compare with true/false or Numbers",
  "parameters" : [ ]
}, {
  "patternId" : "category_ecmascript_errorprone_AvoidTrailingComma",
  "title" : "Avoid Trailing Comma",
  "description" : "Avoid trailing commas in object or array literals",
  "parameters" : [ {
    "name" : "allowArrayLiteral",
    "description" : "Allow a trailing comma within an array literal"
  }, {
    "name" : "allowObjectLiteral",
    "description" : "Allow a trailing comma within an object literal"
  } ]
}, {
  "patternId" : "category_ecmascript_codestyle_WhileLoopsMustUseBraces",
  "title" : "While Loops Must Use Braces",
  "description" : "Avoid using 'while' statements without curly braces",
  "parameters" : [ ]
}, {
  "patternId" : "category_ecmascript_codestyle_UnreachableCode",
  "title" : "Unreachable Code",
  "description" : "A ''return'', ''break'', ''continue'', or ''throw'' statement should be the last in a block.",
  "parameters" : [ ]
}, {
  "patternId" : "category_ecmascript_codestyle_UnnecessaryParentheses",
  "title" : "Unnecessary Parentheses",
  "description" : "Unnecessary parentheses.",
  "parameters" : [ ]
}, {
  "patternId" : "category_ecmascript_codestyle_UnnecessaryBlock",
  "title" : "Unnecessary Block",
  "description" : "Unnecessary block.",
  "parameters" : [ ]
}, {
  "patternId" : "category_ecmascript_codestyle_NoElseReturn",
  "title" : "No ELse Return",
  "description" : "The else block is unnecessary",
  "parameters" : [ ]
}, {
  "patternId" : "category_ecmascript_codestyle_IfStmtsMustUseBraces",
  "title" : "If Stmts Must Use Braces",
  "description" : "Avoid using if statements without curly braces",
  "parameters" : [ ]
}, {
  "patternId" : "category_ecmascript_codestyle_IfElseStmtsMustUseBraces",
  "title" : "If ELse Stmts Must Use Braces",
  "description" : "Avoid using 'if...else' statements without curly braces",
  "parameters" : [ ]
}, {
  "patternId" : "category_ecmascript_codestyle_ForLoopsMustUseBraces",
  "title" : "For Loops Must Use Braces",
  "description" : "Avoid using 'for' statements without curly braces",
  "parameters" : [ ]
}, {
  "patternId" : "category_ecmascript_codestyle_AssignmentInOperand",
  "title" : "Assignment In Operand",
  "description" : "Avoid assignments in operands",
  "parameters" : [ {
    "name" : "allowFor",
    "description" : "Allow assignment within the conditional expression of a for statement"
  }, {
    "name" : "allowIf",
    "description" : "Allow assignment within the conditional expression of an if statement"
  }, {
    "name" : "allowIncrementDecrement",
    "description" : "Allow increment or decrement operators within the conditional expression of an if, for, or while statement"
  }, {
    "name" : "allowTernary",
    "description" : "Allow assignment within the conditional expression of a ternary operator"
  }, {
    "name" : "allowTernaryResults",
    "description" : "Allow assignment within the result expressions of a ternary operator"
  }, {
    "name" : "allowWhile",
    "description" : "Allow assignment within the conditional expression of a while statement"
  } ]
}, {
  "patternId" : "category_ecmascript_bestpractices_UseBaseWithParseInt",
  "title" : "Use Base With Parse Int",
  "description" : "Always provide a base when using parseInt() functions",
  "parameters" : [ ]
}, {
  "patternId" : "category_ecmascript_bestpractices_ScopeForInVariable",
  "title" : "Scope For In Variable",
  "description" : "The for-in loop variable ''{0}'' should be explicitly scoped with 'var' to avoid pollution.",
  "parameters" : [ ]
}, {
  "patternId" : "category_ecmascript_bestpractices_GlobalVariable",
  "title" : "Global Variable",
  "description" : "Avoid using global variables",
  "parameters" : [ ]
}, {
  "patternId" : "category_ecmascript_bestpractices_ConsistentReturn",
  "title" : "Consistent Return",
  "description" : "A function should not mix 'return' statements with and without a result.",
  "parameters" : [ ]
}, {
  "patternId" : "category_ecmascript_bestpractices_AvoidWithStatement",
  "title" : "Avoid With Statement",
  "description" : "Avoid using with - it's bad news",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_security_ApexXSSFromURLParam",
  "title" : "Apex XSS From URL Param",
  "description" : "Apex classes should escape/sanitize Strings obtained from URL parameters",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_security_ApexXSSFromEscapeFalse",
  "title" : "Apex XSS From Escape False",
  "description" : "Apex classes should escape Strings in error messages",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_security_ApexSuggestUsingNamedCred",
  "title" : "Apex Suggest Using Named Cred",
  "description" : "Suggest named credentials for authentication",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_security_ApexSharingViolations",
  "title" : "Apex Sharing Violations",
  "description" : "Apex classes should declare a sharing model if DML or SOQL/SOSL is used",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_security_ApexSOQLInjection",
  "title" : "Apex SOQL Injection",
  "description" : "Avoid untrusted/unescaped variables in DML query",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_security_ApexOpenRedirect",
  "title" : "Apex Open Redirect",
  "description" : "Apex classes should safely redirect to a known location",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_security_ApexInsecureEndpoint",
  "title" : "Apex Insecure Endpoint",
  "description" : "Apex callouts should use encrypted communication channels",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_security_ApexDangerousMethods",
  "title" : "Apex Dangerous Methods",
  "description" : "Calling potentially dangerous method",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_security_ApexCRUDViolation",
  "title" : "Apex CRUD Violation",
  "description" : "Validate CRUD permission before SOQL/DML operation or enforce user mode",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_security_ApexBadCrypto",
  "title" : "Apex Bad Crypto",
  "description" : "Apex classes should use random IV/key",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_performance_OperationWithLimitsInLoop",
  "title" : "Operation With Limits In Loop",
  "description" : "Avoid operations in loops that may hit governor limits",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_performance_OperationWithHighCostInLoop",
  "title" : "Operation With High Cost In Loop",
  "description" : "Avoid operations in loops that may impact performances",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_performance_EagerlyLoadedDescribeSObjectResult",
  "title" : "Eagerly Loaded Describe S Object Result",
  "description" : "DescribeSObjectResult could be being loaded eagerly with all child relationships.",
  "parameters" : [ {
    "name" : "noDefault",
    "description" : "Do not allow SObjectDescribeOptions.DEFAULT option to ensure consistent results no matter where getDescribe is called"
  } ]
}, {
  "patternId" : "category_apex_performance_AvoidNonRestrictiveQueries",
  "title" : "Avoid Non Restrictive Queries",
  "description" : "Avoid {0} queries without a where or limit statement",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_performance_AvoidDebugStatements",
  "title" : "Avoid Debug Statements",
  "description" : "Avoid debug statements since they impact on performance",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_errorprone_TestMethodsMustBeInTestClasses",
  "title" : "Test Methods Must Be In Test Classes",
  "description" : "Test methods must be in test classes",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_errorprone_OverrideBothEqualsAndHashcode",
  "title" : "Override Both Equals And Hashcode",
  "description" : "Ensure you override both equals() and hashCode()",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_errorprone_MethodWithSameNameAsEnclosingClass",
  "title" : "Method With Same Name As Enclosing Class",
  "description" : "Classes should not have non-constructor methods with the same name as the class",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_errorprone_InaccessibleAuraEnabledGetter",
  "title" : "Inaccessible Aura Enabled Getter",
  "description" : "AuraEnabled getter must be public or global if is referenced in Lightning components",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_errorprone_EmptyWhileStmt",
  "title" : "Empty While Stmt",
  "description" : "Avoid empty 'while' statements",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_errorprone_EmptyTryOrFinallyBlock",
  "title" : "Empty Try Or Finally Block",
  "description" : "Avoid empty try or finally blocks",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_errorprone_EmptyStatementBlock",
  "title" : "Empty Statement Block",
  "description" : "Avoid empty block statements.",
  "parameters" : [ {
    "name" : "reportEmptyPrivateNoArgConstructor",
    "description" : "If false, empty private no-arg constructors are not flagged. This supports a common idiom used by singleton pattern implementations, utility classes, etc."
  }, {
    "name" : "reportEmptyVirtualMethod",
    "description" : "If false, empty virtual methods are not flagged. This supports abstract base classes with default no-op implementations."
  } ]
}, {
  "patternId" : "category_apex_errorprone_EmptyIfStmt",
  "title" : "Empty If Stmt",
  "description" : "Avoid empty 'if' statements",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_errorprone_EmptyCatchBlock",
  "title" : "Empty Catch Block",
  "description" : "Avoid empty catch blocks",
  "parameters" : [ {
    "name" : "allowCommentedBlocks",
    "description" : "Empty blocks containing comments will be skipped"
  }, {
    "name" : "allowExceptionNameRegex",
    "description" : "Empty blocks catching exceptions with names matching this regular expression will be skipped"
  } ]
}, {
  "patternId" : "category_apex_errorprone_AvoidNonExistentAnnotations",
  "title" : "Avoid Non Existent Annotations",
  "description" : "Use of non existent annotations will lead to broken Apex code which will not compile in the future.",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_errorprone_AvoidHardcodingId",
  "title" : "Avoid Hardcoding Id",
  "description" : "Hardcoding Id's is bound to break when changing environments.",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_errorprone_AvoidDirectAccessTriggerMap",
  "title" : "Avoid Direct Access Trigger Map",
  "description" : "Avoid directly accessing Trigger.old and Trigger.new",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_errorprone_ApexCSRF",
  "title" : "Apex CSRF",
  "description" : "Avoid making DML operations in Apex class constructor or initializers",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_documentation_ApexDoc",
  "title" : "Apex Doc",
  "description" : "ApexDoc comment is missing or incorrect",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_design_UnusedMethod",
  "title" : "Unused Method",
  "description" : "Unused methods make understanding code harder",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_design_TooManyFields",
  "title" : "Too Many Fields",
  "description" : "Too many fields",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_design_StdCyclomaticComplexity",
  "title" : "Std Cyclomatic Complexity",
  "description" : "The {0} ''{1}'' has a Standard Cyclomatic Complexity of {2}.",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_design_NcssTypeCount",
  "title" : "NCSS Type Count",
  "description" : "The type has an NCSS line count of {0}",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_design_NcssMethodCount",
  "title" : "NCSS Method Count",
  "description" : "The method ''{0}()'' has an NCSS line count of {1} (limit: {2})",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_design_NcssConstructorCount",
  "title" : "NCSS Constructor Count",
  "description" : "The constructor has an NCSS line count of {0}",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_design_ExcessivePublicCount",
  "title" : "Excessive Public Count",
  "description" : "The class {0} has {1} public methods, attributes, and properties (limit: {2})",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_design_ExcessiveParameterList",
  "title" : "Excessive Parameter List",
  "description" : "Avoid long parameter lists.",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_design_ExcessiveClassLength",
  "title" : "Excessive Class Length",
  "description" : "Avoid really long classes.",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_design_CyclomaticComplexity",
  "title" : "Cyclomatic Complexity",
  "description" : "The {0} ''{1}'' has a{2} cyclomatic complexity of {3}.",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_design_CognitiveComplexity",
  "title" : "Cognitive Complexity",
  "description" : "The {0} ''{1}'' has a{2} cognitive complexity of {3}, current threshold is {4}",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_design_AvoidDeeplyNestedIfStmts",
  "title" : "Avoid Deeply Nested If Stmts",
  "description" : "Deeply nested if..then statements are hard to read",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_codestyle_WhileLoopsMustUseBraces",
  "title" : "While Loops Must Use Braces",
  "description" : "Avoid using 'while' statements without curly braces",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_codestyle_PropertyNamingConventions",
  "title" : "Property Naming Conventions",
  "description" : "The {0} name ''{1}'' doesn''t match ''{2}''",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_codestyle_OneDeclarationPerLine",
  "title" : "One Declaration Per Line",
  "description" : "Use one statement for each line, it enhances code readability.",
  "parameters" : [ {
    "name" : "reportInForLoopInitializer",
    "description" : "If false, multiple declarations in a for loop initializer are not flagged."
  }, {
    "name" : "strictMode",
    "description" : "If true, mark combined declaration even if the declarations are on separate lines."
  } ]
}, {
  "patternId" : "category_apex_codestyle_MethodNamingConventions",
  "title" : "Method Naming Conventions",
  "description" : "The {0} name ''{1}'' doesn''t match ''{2}''",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_codestyle_LocalVariableNamingConventions",
  "title" : "Local Variable Naming Conventions",
  "description" : "The {0} name ''{1}'' doesn''t match ''{2}''",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_codestyle_IfStmtsMustUseBraces",
  "title" : "If Stmts Must Use Braces",
  "description" : "Avoid using if statements without curly braces",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_codestyle_IfElseStmtsMustUseBraces",
  "title" : "If ELse Stmts Must Use Braces",
  "description" : "Avoid using 'if...else' statements without curly braces",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_codestyle_FormalParameterNamingConventions",
  "title" : "Formal Parameter Naming Conventions",
  "description" : "The {0} name ''{1}'' doesn''t match ''{2}''",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_codestyle_ForLoopsMustUseBraces",
  "title" : "For Loops Must Use Braces",
  "description" : "Avoid using 'for' statements without curly braces",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_codestyle_FieldNamingConventions",
  "title" : "Field Naming Conventions",
  "description" : "The {0} name ''{1}'' doesn''t match ''{2}''",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_codestyle_FieldDeclarationsShouldBeAtStart",
  "title" : "Field Declarations Should Be At Start",
  "description" : "Field declaration for ''{0}'' should be before method declarations in its class",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_codestyle_ClassNamingConventions",
  "title" : "Class Naming Conventions",
  "description" : "The {0} name ''{1}'' doesn''t match ''{2}''",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_bestpractices_UnusedLocalVariable",
  "title" : "Unused Local Variable",
  "description" : "Variable ''{0}'' defined but not used",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_bestpractices_DebugsShouldUseLoggingLevel",
  "title" : "Debugs Should Use Logging Level",
  "description" : "Calls to System.debug should specify a logging level.",
  "parameters" : [ {
    "name" : "strictMode",
    "description" : "If true, mark statements that use the DEBUG enum of LoggingLevel."
  } ]
}, {
  "patternId" : "category_apex_bestpractices_AvoidLogicInTrigger",
  "title" : "Avoid Logic In Trigger",
  "description" : "Avoid logic in triggers",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_bestpractices_AvoidGlobalModifier",
  "title" : "Avoid Global Modifier",
  "description" : "Avoid using global modifier",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_bestpractices_ApexUnitTestShouldNotUseSeeAllDataTrue",
  "title" : "Apex Unit Test Should Not Use See All Data True",
  "description" : "Apex unit tests should not use @isTest(seeAllData = true)",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_bestpractices_ApexUnitTestMethodShouldHaveIsTestAnnotation",
  "title" : "Apex Unit Test Method Should Have Is Test Annotation",
  "description" : "Apex test methods should have @isTest annotation.",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_bestpractices_ApexUnitTestClassShouldHaveRunAs",
  "title" : "Apex Unit Test Class Should Have Run As",
  "description" : "Apex unit test classes should have at least one System.runAs() call",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_bestpractices_ApexUnitTestClassShouldHaveAsserts",
  "title" : "Apex Unit Test Class Should Have Asserts",
  "description" : "Apex unit tests should System.assert() or assertEquals() or assertNotEquals()",
  "parameters" : [ ]
}, {
  "patternId" : "category_apex_bestpractices_ApexAssertionsShouldIncludeMessage",
  "title" : "Apex Assertions Should Include Message",
  "description" : "Apex test assert statement should make use of the message parameter.",
  "parameters" : [ ]
} ]